```{r}
library(reticulate)
use_condaenv("myenv_x86", required = TRUE)
```

```{python}
import pandas as pd
# Create a dictionary with the data
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35],
        'City': ['New York', 'San Francisco', 'Los Angeles']}

# Create the DataFrame
df = pd.DataFrame(data)
```

figure @fig-scatterplot

```{python}
#| label: fig-scatterplot
#| fig-cap: "City and highway mileage for 38 popular models of cars."
#| fig-subcap:
#|   - "Color by number of cylinders"
#|   - "Color by engine displacement, in liters"
#| layout-ncol: 2
#| column: page
import plotly.express as px
df = px.data.iris()
df["e"] = df["sepal_width"]/100
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 error_x="e", error_y="e")
fig.update_layout(xaxis=dict(title_font=dict(size=50)),
                  yaxis=dict(title_font=dict(size=50)))
                  
df = px.data.iris()
df["e"] = df["sepal_width"]/1
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 error_x="e", error_y="e")
fig.update_layout(xaxis=dict(title_font=dict(size=50)),
                  yaxis=dict(title_font=dict(size=50)))

df = px.data.iris()
df["e"] = df["sepal_width"]/10
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 error_x="e", error_y="e")
fig.update_layout(xaxis=dict(title_font=dict(size=50)),
                  yaxis=dict(title_font=dict(size=50)))

df = px.data.iris()
df["e"] = df["sepal_width"]/100
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 error_x="e", error_y="e")
fig.update_layout(xaxis=dict(title_font=dict(size=50)),
                  yaxis=dict(title_font=dict(size=50)))

```

```{python}
import plotly.graph_objs as go
from plotly.subplots import make_subplots

# Create some data
x = [1, 2, 3, 4, 5]
y1 = [2, 4, 1, 3, 5]
y2 = [5, 3, 2, 4, 1]

# Create a subplot with two scatter plots
fig = make_subplots(rows=1, cols=2, subplot_titles=("Plot 1", "Plot 2"))
fig.add_trace(go.Scatter(x=x, y=y1, mode='markers', name='Plot 1'), row=1, col=1)
fig.add_trace(go.Scatter(x=x, y=y2, mode='markers', name='Plot 2'), row=1, col=2)

# Set the layout of the subplot
fig.update_layout(title='Example Subplot', showlegend=False)

fig

```

#### test

here

```{python}
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objs as go

df = px.data.iris()

# Define the different values of "e" to use
e_values = [1, 10, 100]

# Create a subplot with one scatter plot for each "e" value
fig = make_subplots(rows=1, cols=len(e_values), subplot_titles=[f"e={e}" for e in e_values])

for i, e in enumerate(e_values):
    df[f"e_{e}"] = df["sepal_width"] / e
    scatter = go.Scatter(x=df["sepal_width"], y=df["sepal_length"], mode="markers",
                         marker=dict(size=5), error_x=dict(array=df[f"e_{e}"]), error_y=dict(array=df[f"e_{e}"]))
    fig.add_trace(scatter, row=1, col=i+1)
    fig.update_xaxes(title_text="Sepal Width", row=1, col=i+1, title_font=dict(size=20))
    fig.update_yaxes(title_text="Sepal Length", row=1, col=i+1, title_font=dict(size=20))
    # Set the layout of the subplot
    fig.update_layout(title="Example Subplots", showlegend=False)


```

```{python}
import numpy as np
import plotly.express as px
from plotly.subplots import make_subplots

def plot_gaussian(mu, sigma, n, number_points, degrees,):
    """
    Plot the optical field equation using Bokeh

    Parameters
    ----------
    mu (float): Mean value for the equation
    sigma (float): Standard deviation value for the equation
    n (float): Order value for the equation
    number_points (int): number of points to calculate the function
    
    Returns
    -------
    plots (plotly plot): Plot of the Super-Gaussian equation
    x(np): linspace for the gaussian plot
    y(np): gaussian values
    """

    # 1. Define linear degrees vector and calculate super-Gaussian
    x = np.linspace(degrees[0], degrees[1], number_points)
    y = np.exp(-abs(((x-mu)/sigma))**n) 
    p = px.line(x=x, y=y)
    return p


def gridplot_plotly(plots, cols, rows, titles, width, height):
    # create a new subplot figure
    fig = make_subplots(rows=rows, cols=cols, subplot_titles=titles,
                        shared_xaxes=False, shared_yaxes=False)

    # add the plots to the subplot grid
    for i, plot in enumerate(plots):
        row = (i // cols) + 1
        col = (i % cols) + 1
        fig.add_trace(plot.data[0], row=row, col=col)

        # set the scaleanchor and scaleratio for the x and y axes
        fig.update_xaxes(scaleanchor=f"x{i+1}", scaleratio=1, row=row, col=col)
        fig.update_yaxes(scaleanchor=f"y{i+1}", scaleratio=1, row=row, col=col)
    
    # update the subplot layout
    fig.update_layout(height=rows*height, width=cols*width, showlegend=False)

    # show the plot
    return fig


# 1. Define input parameters for the optical field
mu_np = np.linspace(-4, 4, 3)
std_np = np.linspace(1.0, 2.5, 3)
X, Y = np.meshgrid(mu_np, std_np)
n = 3.5
number_points = 10000
degrees = [-15, 15]
number_windows = 32
window_size = number_points//number_windows
gap = 100

# 2. Define empty plot lists
plots_gaussian = []
plots_histogram = []
titles = []

for i in range(len(mu_np)):
    for j in range(len(std_np)):
        # a. Calculate window integration
        title = f"mu: {mu_np[i]:.3f}, sigma: {std_np[j]:.3f}"
        p = plot_gaussian(mu_np[i], std_np[j], n, number_points, degrees)
        plots_gaussian.append(p)
        titles.append(title)

# Plot grid using px.gridplot
subplots = gridplot_plotly(plots_gaussian, 3, 3, titles, 500, 200)
subplots 

```

```{python}
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def plot_gaussian(mu, sigma, n, number_points, degrees,):
    """
    Plot the optical field equation using Bokeh

    Parameters
    ----------
    mu (float): Mean value for the equation
    sigma (float): Standard deviation value for the equation
    n (float): Order value for the equation
    number_points (int): number of points to calculate the function
    
    Returns
    -------
    plots (plotly plot): Plot of the Super-Gaussian equation
    x(np): linspace for the gaussian plot
    y(np): gaussian values
    """

    # 1. Define linear degrees vector and calculate super-Gaussian
    x = np.linspace(degrees[0], degrees[1], number_points)
    y = np.exp(-abs(((x-mu)/sigma))**n) 
    
    # 2. Plot using Seaborn
    sns.set(style="darkgrid")
    fig, ax = plt.subplots()
    ax.plot(x, y)
    # ax.set(xlabel='x', ylabel='y')
    # ax.set_title('Super-Gaussian')
    return fig, x, y

def gridplot_seaborn(plots, cols, rows, titles, width, height):
    # create a new subplot figure
    fig, axes = plt.subplots(rows, cols, figsize=(width, height), squeeze=False)

    # add the plots to the subplot grid
    for i, plot in enumerate(plots):
        row = i // cols
        col = i % cols
        ax = axes[row, col]
        ax.plot(plot[1], plot[2])
        ax.set(title=titles[i], xlabel='x', ylabel='y')

    # adjust the spacing between subplots
    fig.tight_layout()

    # show the plot
    return fig


# 1. Define input parameters for the optical field
mu_np = np.linspace(-4, 4, 3)
std_np = np.linspace(1.0, 2.5, 3)
X, Y = np.meshgrid(mu_np, std_np)
n = 3.5
number_points = 10000
degrees = [-15, 15]
number_windows = 32
window_size = number_points//number_windows
gap = 100

# 2. Define empty plot lists
plots_gaussian = []
plots_histogram = []
titles = []

for i in range(len(mu_np)):
    for j in range(len(std_np)):
        # a. Calculate window integration
        title = f"mu: {mu_np[i]:.3f}, sigma: {std_np[j]:.3f}"
        fig, x, y = plot_gaussian(mu_np[i], std_np[j], n, number_points, degrees)
        plots_gaussian.append((fig, x, y))
        titles.append(title)

subplots = gridplot_seaborn(plots_gaussian, 3, 3, titles, 10, 8)
plt.show()
```

**Optosurf 32 pixel line detector**

The Optosurf head is able to detect scattered light in order to measure roughness. The roughness of a sample can be determined from the shape of the optical field that goes into the detector, for rougher samples the optical field will be wider. The optosurf is also able to determine the lateral shift of the optical field, this is equivalent to the incoming angle of the sample's reflected light.

\
In order to sample the optical field, the optosurf head has a 32-pixel linear detector. The optical field is sampled by performing a window integration over each pixel, obtaining 32 sampling points. The measured parameter to characterize the sample roughness is called \<span style="color:#3E78B2"\>Aq\</span\> and is calculated by reconstructing a histogram of the sampling points. The sampling process of the optical field and Aq value calculation is illustrated in \@fig-2-1.
